name: EKS Deploy

on:
  workflow_run:
    workflows: ["IAM Roles Setup"]
    types:
      - completed
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - main

jobs:
  create_eks_cluster:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Artifacts Directory
        run: mkdir -p ./artifacts
        
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: iam-role-arns
          path: ./artifacts
      - name: List Available Artifacts
        run: |
          echo "Listing artifacts available for download"
          echo "Available artifacts:"
          ls -lR ./artifacts
  

      - name: Set Environment Variables
        run: |
          echo "github_actions_role_arn=$(cat ./artifacts/github_actions_role_arn.txt)" >> $GITHUB_ENV
          echo "eks_node_group_role_arn=$(cat ./artifacts/eks_node_group_role_arn.txt)" >> $GITHUB_ENV


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.github_actions_role_arn }}
          aws-region: us-west-2
          role-session-name: github-actions

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/eks

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        id: plan
        run: terraform plan -no-color > eks-plan-output.txt
        working-directory: ./terraform/eks

      - name: Post Plan Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: ./terraform/eks/eks-plan-output.txt

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -var "eks_node_group_role_arn=${{ env.eks_node_group_role_arn }}"
        working-directory: ./terraform/eks

      - name: Save Outputs
        id: save_outputs
        run: |
          echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
        working-directory: ./terraform/eks
        
  apply_aws_auth_configmap:
    needs: create_eks_cluster
    runs-on: ubuntu-latest
    steps:
      -  name: Checkout code
         uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.github_actions_role_arn }}
          aws-region: us-west-2
          role-session-name: github-actions

      - name: Set up kubectl
        run: |
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Update kubeconfig
        run: |
            aws eks update-kubeconfig --name ${{ env.eks_cluster_name }} --region us-west-2

      - name: Apply aws-auth ConfigMap
        run: |
            cat <<EOF >aws-auth-cm.yaml
            apiVersion: v1
            kind: ConfigMap
            metadata:
            name: aws-auth
            namespace: kube-system
            data:
            mapRoles: |
                - rolearn: ${{ env.eks_node_group_role_arn }}
                username: system:node:{{EC2PrivateDNSName}}
                groups:
                    - system:bootstrappers
                    - system:nodes
                - rolearn: ${{ env.github_actions_role_arn }}
                username: github-actions
                groups:
                    - system:masters
            EOF
            kubectl apply -f aws-auth-cm.yaml